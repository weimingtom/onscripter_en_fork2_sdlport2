breakpoint<1>
void ONScripterLabel::flushDirect( SDL_Rect &rect, int refresh_mode, bool updaterect )
{
	char str[256] = {0};
    sprintf(str, "flush %d: %d %d %d %d\n", refresh_mode, rect.x, rect.y, rect.w, rect.h );
	OutputDebugString(str);
----------------------
breakpoint<2>

int ONScripterLabel::parseLine( )
{
    int ret;
    char *cmd = script_h.getStringBuffer();
    if (cmd[0] == '_'){
        int c=0;
        while (cmd[c+1] != 0) {
            cmd[c] = cmd[c+1];
            c++;
        }
        cmd[c] = '\0';
    }
    const char *s_buf = script_h.getStringBuffer();
    if ( !script_h.isText() ){
        snprintf(script_h.current_cmd, 64, "%s", s_buf);
        //Check against builtin cmds
        if (cmd[0] >= 'a' && cmd[0] <= 'z'){
			//TODO:
			char debugstr[256] = {0};
			sprintf(debugstr, ">>>>>>>> %s\n", cmd); 
			OutputDebugString(debugstr);
			

--------------------
breakpoint<3>

int ScriptParser::parseLine()
{
    const char *cmd = script_h.getStringBuffer() + string_buffer_offset;

    if ( (debug_level > 0) && (*cmd != ':') && (*cmd != 0x0a) ) {
        printf("ScriptParser::Parseline %s\n", cmd );
        fflush(stdout);
    }

    script_h.current_cmd[0] = '\0';
    script_h.current_cmd_type = ScriptHandler::CMD_NONE;

    if ( *cmd == ';' ) return RET_CONTINUE;
    else if ( *cmd == '*' ) return RET_CONTINUE;
    else if ( *cmd == ':' ) return RET_CONTINUE;
    else if ( script_h.isText() ) return RET_NOMATCH;

    if (*cmd != '_'){
        snprintf(script_h.current_cmd, 64, "%s", cmd);
        //Check against user-defined cmds
        if (cmd[0] >= 'a' && cmd[0] <= 'z'){
			//TODO:
			char debugstr[256] = {0};
			sprintf(debugstr, "<<<<<<<< %s\n", cmd); 
			OutputDebugString(debugstr);



--------------------

flushDirect

-----------------------------------

	//for simple test msdl implement
	//FIXME:???
#if defined(_MSC_VER)
	rect.x = 0;
	rect.y = 0;
	rect.w = 640;
	rect.h = 480;
#endif    

-----------------------------------


