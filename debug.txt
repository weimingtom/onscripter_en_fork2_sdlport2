main for onscripter_en_fork2_sdlport2  

----------------------

    if ( IS_TWO_BYTE(ch) ){ // Shift jis

        bool flush_flag = !(skip_mode || ctrl_pressed_status || (sentence_font.wait_time == 0));

        out_text[0] = script_h.getStringBuffer()[string_buffer_offset];
        out_text[1] = script_h.getStringBuffer()[string_buffer_offset+1];

        last_textpos_xy[0] = sentence_font.x()-sentence_font.ruby_offset_xy[0];
        last_textpos_xy[1] = sentence_font.y()-sentence_font.ruby_offset_xy[1];
draw----->        drawChar( out_text, &sentence_font, flush_flag, true, accumulation_surface, &text_info );




        if (flush_flag) {
            if (!( (skip_mode & (SKIP_TO_WAIT | SKIP_TO_EOL)) ||
                   (sentence_font.wait_time == 0) )) {
                event_mode = WAIT_TEXTOUT_MODE;
                if ( sentence_font.wait_time == -1 )
                    waitEvent( default_text_speed[text_speed_no] );
                else
draw go here----->                    waitEvent( sentence_font.wait_time );
            }
        }
        num_chars_in_sentence += 2;
        string_buffer_offset += 2;

---->        return true;
        
---------------------------------------
!!!!!test this method!!!!!


void ONScripterLabel::drawChar( char* text, Fontinfo *info, bool flush_flag,
                                bool lookback_flag, SDL_Surface *surface,
                                AnimationInfo *cache_info, int abs_offset, SDL_Rect *clip )
{
    //printf("draw %x-%x[%s] %d, %d\n", text[0], text[1], text, info->xy[0], info->xy[1] );

break here ---->    if ( info->ttf_font == NULL ){
   
    。。。。


    if ( !isNonPrinting(&out_text[0]) ){
        //don't bother drawing non-printing glyphs
        SDL_Color color;
        SDL_Rect dst_rect;
        if ( info->is_shadow ){
            color.r = color.g = color.b = 0;
            drawGlyph(surface, info, color, out_text, xy, true, cache_info, clip, dst_rect);
        }
        color.r = info->color[0];
        color.g = info->color[1];
        color.b = info->color[2];
        drawGlyph( surface, info, color, out_text, xy, false, cache_info, clip, dst_rect );

        if ( surface == accumulation_surface &&
             !flush_flag &&
             (!clip || AnimationInfo::doClipping( &dst_rect, clip ) == 0) ){
            info->addShadeArea(dst_rect, shade_distance);
            dirty_rect.add( dst_rect );
        }
        else if ( flush_flag ){
            info->addShadeArea(dst_rect, shade_distance);
flush here---->            flushDirect( dst_rect, REFRESH_NONE_MODE );
        }
    }
    
-----------------------------------


        refreshSurface( accumulation_surface, &rect, refresh_mode );
        SDL_BlitSurface( accumulation_surface, &rect, screen_surface, &rect );
		//SDL_SaveBMP(
snapshot screen buffer: accumulation_surface--->		SDL_savebmp(accumulation_surface->_surf);



//snapshot goto here


int MSD_SaveBMP_RW (MSD_Surface *saveme, MSD_RWops *dst, int freedst)
{
	int is_no_error = 1;
	long fp_offset;
	int i, pad;
	MSD_Surface *surface;
	uint8_t *bits;

	char magic[2] = { 'B', 'M' };
	uint32_t bfSize;
	uint16_t bfReserved1;
	uint16_t bfReserved2;
	uint32_t bfOffBits;

	uint32_t biSize;
	int32_t biWidth;
	int32_t biHeight;
	uint16_t biPlanes;
	uint16_t biBitCount;
	uint32_t biCompression;
	uint32_t biSizeImage;
	int32_t biXPelsPerMeter;
	int32_t biYPelsPerMeter;
	uint32_t biClrUsed;
	uint32_t biClrImportant;

	surface = NULL;
---->	if (dst) {
	
	
----------------------------------------------------------

	MSD_FillRect(dst_surf, NULL, 0xFF000000);
--->	MSD_SetAlpha(dst_surf, 0, 0xFF);
	MSD_BlitSurface(src_surf, p_srcrect, dst_surf, p_dstrect);
	if (dst == __sdl_vsurf) {
--->		SDL_savebmp(dst_surf, "__sdl_vsurf");
	}
	
	
--------------------------------------------------


static int save_time = 0;
void SDL_savebmp(MSD_Surface *surf, const char *name)
{
------->#if 0
	char filename[256] = {0};
	sprintf(filename, "%s-%d.bmp", name, save_time++);
	MSD_SaveBMP(surf, filename);
#endif
}


	
    